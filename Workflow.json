{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        480
      ],
      "id": "800bcdd5-973f-47ce-90fd-8be26426a13f",
      "name": "Request",
      "webhookId": "de4cf250-b1ad-41f1-94d8-41e11c168e1e",
      "credentials": {
        "telegramApi": {
          "id": "xzQ3XLqfI6hwWnfZ",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputText = $json.message.text || \"\";\nconst tradingPair = inputText.trim().toUpperCase() + \"USDT\";\n\nreturn [\n  {\n    json: {\n      tradingPair\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        480
      ],
      "id": "b8bb0f2a-8010-4b05-878a-3245094abf41",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "=https://api.binance.com/api/v3/klines?symbol={{ $json.tradingPair }}&interval=15m&limit=300",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        260
      ],
      "id": "22c49512-61c6-4c1a-812f-b36d34247cfe",
      "name": "neural_schema 1"
    },
    {
      "parameters": {
        "url": "=https://api.binance.com/api/v3/klines?symbol={{ $json.tradingPair }}&interval=1d&limit=300",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        480
      ],
      "id": "99636231-5423-4e1b-ad3b-880662ed33ff",
      "name": "neural_schema 2"
    },
    {
      "parameters": {
        "url": "=https://api.binance.com/api/v3/klines?symbol={{ $json.tradingPair }}&interval=1h&limit=300 ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        700
      ],
      "id": "d4e248ca-a1ec-4667-8993-1a35be0add3c",
      "name": "neural_schema 3"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={  \n   \"timeframe\" : \"15m\",\n   \"candles\"   :   {{ $json }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        640,
        260
      ],
      "id": "494e3a1a-8735-4146-aa81-ff215fe0bd7c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \n  \"timeframe\" : \"1h\",\n   \"candles\"   :  {{ $json }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        640,
        480
      ],
      "id": "bfc6a7fc-d081-420f-bbbb-4e2b3d5fe6ee",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"timeframe\" : \"1d\",\n   \"candles\"   :   {{ $json }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        640,
        700
      ],
      "id": "daf72a11-240f-49dc-b7c6-80cae182bdee",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        920,
        480
      ],
      "id": "c53cf3e3-399c-4c89-987f-857248a794e2",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const allCandles = [];\n\nfor (const item of items) {\n    allCandles.push(item.json);\n}\n\n// Proper n8n return syntax\nreturn [{\n    json: {\n        allCandles: allCandles\n    }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        480
      ],
      "id": "6e2ab659-1d4f-43bb-8cdd-1144b2501613",
      "name": "Code1"
    },
    {
      "parameters": {
        "url": "https://newsapi.org/v2/everything",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "Crypto OR Coindesk OR Binance OR coinbase OR Blockchain OR BITCOIN OR Ethereum"
            },
            {
              "name": "from",
              "value": "={{\n    new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n}}"
            },
            {
              "name": "apikey",
              "value": "0b188596e2b949fbb5fb0dbb8f6021c1"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        920
      ],
      "id": "6d5a20cd-2d95-43ee-923c-50cfc9e2a297",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data using n8n's special syntax\nconst inputData = JSON.parse(JSON.stringify($input.all()[0].json));\n\n// Process articles to remove unwanted fields\nconst cleanedArticles = inputData.articles.map(article => {\n  const { publishedAt, urlToImage, url, author,content, ...rest } = article;\n  return {\n    ...rest,\n    source: { name: article.source.name } // Keep only source name\n  };\n});\n\n// Return the cleaned data in n8n format\nreturn [{\n  json: {\n    status: inputData.status,\n    totalResults: inputData.totalResults,\n    articles: cleanedArticles\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        920
      ],
      "id": "ba895993-b21d-478f-be54-fec8285794af",
      "name": "Filter"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1560,
        540
      ],
      "id": "bdad8e7a-2df6-408b-ab15-ebd0e0493015",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "const allCandles = [];\nlet contentData = null;\n\nfor (const item of items) {\n  if (item.json.allCandles !== undefined) {\n    allCandles.push(...item.json.allCandles);\n  }\n  if (item.json.message && item.json.message.content !== undefined) {\n    contentData = item.json.message.content;\n  }\n}\n\n// Get 1D candles\nconst oneDayCandles = allCandles.find(c => c.timeframe === \"1d\")?.candles || [];\n\n// --- Price Data Processing ---\nconst closePrices = [];\nconst highPrices = [];\nconst lowPrices = [];\nconst volumes = [];\n\nfor (const c of oneDayCandles) {\n  const close = parseFloat(c[4]);\n  const high = parseFloat(c[2]);\n  const low = parseFloat(c[3]);\n  const volume = parseFloat(c[5]);\n  \n  if (!isNaN(close)) closePrices.push(close);\n  if (!isNaN(high)) highPrices.push(high);\n  if (!isNaN(low)) lowPrices.push(low);\n  if (!isNaN(volume)) volumes.push(volume);\n}\n\n// --- Latest Candle Data ---\nconst latest = oneDayCandles[oneDayCandles.length - 1] || [];\nconst price = parseFloat(latest[4]) || getAverage(closePrices);\nconst open = parseFloat(latest[1]) || getAverage(closePrices);\nconst highPrice = parseFloat(latest[2]) || getAverage(highPrices);\nconst lowPrice = parseFloat(latest[3]) || getAverage(lowPrices);\nconst volume = parseFloat(latest[5]) || getAverage(volumes);\nconst priceChangePercent = open && price ? (((price - open) / open) * 100).toFixed(2) : \"N/A\";\n\n// --- Support/Resistance Levels ---\nconst supportLevels = price ? [ \n  (price * 0.95).toFixed(2), \n  (price * 0.90).toFixed(2) \n] : [\"N/A\", \"N/A\"];\n\nconst resistanceLevels = price ? [\n  (price * 1.05).toFixed(2),\n  (price * 1.10).toFixed(2)\n] : [\"N/A\", \"N/A\"];\n\n// --- Indicator Calculations with NaN handling ---\n\n// RSI Calculation with fallback\nfunction calculateRSI(prices, period = 14) {\n  if (!prices || prices.length < period + 1) {\n    // Fallback: Use price momentum as proxy\n    if (prices && prices.length > 1) {\n      const gains = prices.slice(-5).filter((v,i,a) => i > 0 && v > a[i-1]).length;\n      const losses = prices.slice(-5).filter((v,i,a) => i > 0 && v < a[i-1]).length;\n      return gains > losses ? 60 : losses > gains ? 40 : 50; // Neutral range\n    }\n    return 50; // Neutral default\n  }\n  \n  let gains = 0, losses = 0;\n  for (let i = 1; i <= period; i++) {\n    const diff = prices[i] - prices[i - 1];\n    if (diff >= 0) gains += diff;\n    else losses -= diff;\n  }\n\n  let avgGain = gains / period;\n  let avgLoss = losses / period;\n\n  for (let i = period + 1; i < prices.length; i++) {\n    const diff = prices[i] - prices[i - 1];\n    if (diff >= 0) {\n      avgGain = (avgGain * (period - 1) + diff) / period;\n      avgLoss = (avgLoss * (period - 1)) / period;\n    } else {\n      avgGain = (avgGain * (period - 1)) / period;\n      avgLoss = (avgLoss * (period - 1) - diff) / period;\n    }\n  }\n\n  if (avgLoss === 0) return 100;\n  const rs = avgGain / avgLoss;\n  return +(100 - 100 / (1 + rs)).toFixed(2);\n}\n\n// MACD Calculation with fallback\nfunction calculateMACD(prices, shortPeriod = 12, longPeriod = 26, signalPeriod = 9) {\n  if (!prices || prices.length < longPeriod + signalPeriod) {\n    // Fallback: Use simple price trend analysis\n    if (prices && prices.length > 3) {\n      const shortAvg = getAverage(prices.slice(-shortPeriod));\n      const longAvg = getAverage(prices.slice(-longPeriod));\n      const diff = shortAvg - longAvg;\n      return {\n        macd: +diff.toFixed(3),\n        signal: +(diff * 0.9).toFixed(3), // Approximate signal line\n        histogram: +(diff * 0.1).toFixed(3),\n        state: diff > 0 ? \"Bullish\" : diff < 0 ? \"Bearish\" : \"Neutral\"\n      };\n    }\n    return {\n      macd: 0,\n      signal: 0,\n      histogram: 0,\n      state: \"Neutral\"\n    };\n  }\n\n  const ema = (data, period) => {\n    const k = 2 / (period + 1);\n    let emaVals = [data.slice(0, period).reduce((a, b) => a + b) / period];\n    for (let i = period; i < data.length; i++) {\n      emaVals.push(data[i] * k + emaVals[emaVals.length - 1] * (1 - k));\n    }\n    return emaVals;\n  };\n\n  const shortEma = ema(prices, shortPeriod);\n  const longEma = ema(prices, longPeriod);\n  const macdLine = shortEma.slice(longEma.length - shortEma.length).map((v, i) => v - longEma[i]);\n  const signalLine = ema(macdLine, signalPeriod);\n\n  const latestMacd = macdLine[macdLine.length - 1];\n  const latestSignal = signalLine[signalLine.length - 1];\n  const histogram = +(latestMacd - latestSignal).toFixed(3);\n  const state = histogram > 0 ? \"Bullish\" : histogram < 0 ? \"Bearish\" : \"Neutral\";\n\n  return { \n    macd: +latestMacd.toFixed(3), \n    signal: +latestSignal.toFixed(3), \n    histogram, \n    state \n  };\n}\n\n// Stochastic RSI with fallback\nfunction calculateStochasticRSI(prices, rsiPeriod = 14, stochPeriod = 14) {\n  const rsiVals = [];\n  for (let i = rsiPeriod; i <= prices.length; i++) {\n    const rsi = calculateRSI(prices.slice(i - rsiPeriod, i), rsiPeriod);\n    if (rsi !== null) rsiVals.push(rsi);\n  }\n  \n  if (rsiVals.length < stochPeriod) {\n    // Fallback: Use simple RSI position\n    if (rsiVals.length > 0) {\n      const lastRSI = rsiVals[rsiVals.length - 1];\n      return lastRSI > 70 ? 80 : lastRSI < 30 ? 20 : 50;\n    }\n    return 50; // Neutral default\n  }\n\n  const recentRSI = rsiVals.slice(-stochPeriod);\n  const min = Math.min(...recentRSI);\n  const max = Math.max(...recentRSI);\n  const last = recentRSI[recentRSI.length - 1];\n\n  return +(((last - min) / (max - min)) * 100).toFixed(2);\n}\n\n// ATR Calculation with fallback\nfunction calculateATR(highs, lows, closes, period = 14) {\n  if (!highs || !lows || !closes || highs.length < period + 1) {\n    // Fallback: Use simple percentage of price\n    if (highs && highs.length > 0 && lows && lows.length > 0) {\n      const avgRange = (getAverage(highs) - getAverage(lows)) / getAverage(closes);\n      return +(avgRange * price * 0.7).toFixed(2); // 70% of average range\n    }\n    return price ? +(price * 0.02).toFixed(2) : 0; // 2% of price as default\n  }\n  \n  const tr = [];\n  for (let i = 1; i < highs.length; i++) {\n    tr.push(Math.max(\n      highs[i] - lows[i],\n      Math.abs(highs[i] - closes[i - 1]),\n      Math.abs(lows[i] - closes[i - 1])\n    ));\n  }\n  \n  const atr = tr.slice(-period).reduce((a, b) => a + b) / period;\n  return +atr.toFixed(2);\n}\n\n// --- Helper function for averages ---\nfunction getAverage(arr) {\n  if (!arr || arr.length === 0) return 0;\n  const sum = arr.reduce((a, b) => a + b, 0);\n  return sum / arr.length;\n}\n\n// --- Calculate All Indicators ---\nconst rsi = calculateRSI(closePrices);\nconst macdResult = calculateMACD(closePrices);\nconst stochasticRsi = calculateStochasticRSI(closePrices);\nconst atr = calculateATR(highPrices, lowPrices, closePrices);\n\n// --- Risk/Reward Calculations ---\nconst stopLoss = price && atr ? (price - atr * 2).toFixed(2) : price ? (price * 0.98).toFixed(2) : \"N/A\";\nconst takeProfits = price && atr ? [\n  (price + atr * 1.5).toFixed(2),\n  (price + atr * 2.5).toFixed(2),\n  (price + atr * 3.5).toFixed(2)\n] : price ? [\n  (price * 1.03).toFixed(2),\n  (price * 1.06).toFixed(2),\n  (price * 1.09).toFixed(2)\n] : [\"N/A\", \"N/A\", \"N/A\"];\n\n// --- Bollinger Bands with fallback ---\nconst bollingerBands = price ? {\n  upper: (price * 1.05).toFixed(2),\n  lower: (price * 0.95).toFixed(2),\n  middle: price.toFixed(2)\n} : { \n  upper: \"N/A\", \n  lower: \"N/A\", \n  middle: \"N/A\" \n};\n\n// --- Sentiment Analysis ---\nconst relevantNews = contentData?.articles?.slice(0, 3) || [];\nconst hasPositiveNews = relevantNews.some(article => \n  article.title?.toLowerCase().includes('bullish') || \n  article.description?.toLowerCase().includes('growth')\n);\n\nconst longTermSentiment = hasPositiveNews ? \"Bullish\" : \"Neutral\";\nconst shortTermSentiment = stochasticRsi > 80 ? \"Overbought\" : stochasticRsi < 20 ? \"Oversold\" : \"Neutral\";\nconst sentimentSummary = `${\n  longTermSentiment === \"Bullish\" ? \n  \"Positive long-term outlook\" : \n  \"Neutral long-term outlook\"\n} with ${\n  shortTermSentiment.toLowerCase()\n} short-term conditions`;\n\n// --- Final Output ---\nreturn [{\n  json: {\n    // Raw Data\n    allCandles,\n    content: contentData,\n    \n    // Price Data\n    price: price || \"N/A\",\n    priceChangePercent,\n    highPrice: highPrice || \"N/A\",\n    lowPrice: lowPrice || \"N/A\",\n    volume: volume || \"N/A\",\n    \n    // Technical Indicators\n    rsi: rsi || \"N/A\",\n    macd: macdResult || {macd: \"N/A\", signal: \"N/A\", histogram: \"N/A\", state: \"N/A\"},\n    stochasticRsi: stochasticRsi || \"N/A\",\n    atr: atr || \"N/A\",\n    bollingerBands,\n    \n    // Levels\n    supportLevels,\n    resistanceLevels,\n    \n    // Risk Management\n    stopLoss,\n    takeProfits,\n    \n    // Sentiment Analysis\n    longTermSentiment,\n    shortTermSentiment,\n    sentimentSummary,\n    relevantNews,\n    \n    // Derived Insights\n    trendSummary: getTrendSummary(rsi, macdResult.state),\n    momentumScore: calculateMomentumScore(closePrices),\n    momentumDirection: macdResult.histogram > 0 ? \"Upward\" : macdResult.histogram < 0 ? \"Downward\" : \"Neutral\",\n    volumeTrend: getVolumeTrend(volumes),\n    volatility7d: calculateVolatility(closePrices, 7),\n    priceActionInsight: getPriceActionInsight(price, supportLevels, resistanceLevels)\n  }\n}];\n\n// --- Enhanced Helper Functions ---\nfunction getTrendSummary(rsi, macdState) {\n  if (rsi === null || !macdState) {\n    // Fallback trend detection using simple moving averages\n    if (closePrices && closePrices.length > 10) {\n      const shortAvg = getAverage(closePrices.slice(-5));\n      const longAvg = getAverage(closePrices.slice(-10));\n      return shortAvg > longAvg ? \"Mild uptrend\" : shortAvg < longAvg ? \"Mild downtrend\" : \"Neutral trend\";\n    }\n    return \"Insufficient data\";\n  }\n  \n  if (rsi > 70 && macdState === \"Bearish\") return \"Strong downtrend\";\n  if (rsi < 30 && macdState === \"Bullish\") return \"Strong uptrend\";\n  if (macdState === \"Bullish\") return \"Mild uptrend\";\n  if (macdState === \"Bearish\") return \"Mild downtrend\";\n  return \"Neutral trend\";\n}\n\nfunction calculateMomentumScore(prices) {\n  if (!prices || prices.length < 5) {\n    // Fallback: Use price change percentage\n    if (prices && prices.length > 1) {\n      const change = ((prices[prices.length-1] - prices[0]) / prices[0]) * 100;\n      return +(Math.min(Math.abs(change), 10)).toFixed(1); // Cap at 10\n    }\n    return 5; // Neutral default\n  }\n  const recent = prices.slice(-5);\n  const slope = (recent[4] - recent[0]) / 4;\n  return +(Math.abs(slope) * 10).toFixed(1); // Score 0-10\n}\n\nfunction getVolumeTrend(volumes) {\n  if (!volumes || volumes.length < 3) {\n    // Fallback: Check if last volume is above average\n    if (volumes && volumes.length > 0) {\n      const avg = getAverage(volumes);\n      return volumes[volumes.length-1] > avg ? \"Increasing\" : \"Decreasing\";\n    }\n    return \"Stable\";\n  }\n  const avg = arr => arr.reduce((a,b) => a + b, 0) / arr.length;\n  const recent = volumes.slice(-3);\n  const prev = volumes.slice(-6, -3);\n  return avg(recent) > avg(prev) ? \"Increasing\" : \"Decreasing\";\n}\n\nfunction calculateVolatility(prices, days) {\n  if (!prices || prices.length < days) {\n    // Fallback: Use ATR percentage if available\n    if (atr && price) return +(atr / price * 100).toFixed(1) + \"%\";\n    return \"3.0%\"; // Default average volatility\n  }\n  const recent = prices.slice(-days);\n  const changes = [];\n  for (let i = 1; i < recent.length; i++) {\n    changes.push(Math.abs((recent[i] - recent[i-1]) / recent[i-1]));\n  }\n  return (changes.reduce((a,b) => a + b, 0) / changes.length * 100).toFixed(1) + \"%\";\n}\n\nfunction getPriceActionInsight(price, supportLevels, resistanceLevels) {\n  if (!price) return \"No price data available\";\n  \n  const nearSupport = supportLevels.some(level => \n    level !== \"N/A\" && Math.abs(price - parseFloat(level)) < price * 0.01\n  );\n  const nearResistance = resistanceLevels.some(level => \n    level !== \"N/A\" && Math.abs(price - parseFloat(level)) < price * 0.01\n  );\n  \n  if (nearSupport) return \"Price near support level - potential bounce\";\n  if (nearResistance) return \"Price near resistance level - potential rejection\";\n  \n  // Fallback: Use RSI position if available\n  if (rsi) {\n    return rsi > 70 ? \"Price may be overbought\" : \n           rsi < 30 ? \"Price may be oversold\" : \n           \"Price in middle of range - wait for breakout\";\n  }\n  return \"Price in middle of range - wait for breakout\";\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1840,
        540
      ],
      "id": "036bc896-1e7a-415b-9c4d-88048794ef54",
      "name": "Code2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1020,
        940
      ],
      "id": "e2f75576-2e8d-408e-9221-d1057de32c15",
      "name": "Mistral Cloud Chat Model",
      "credentials": {
        "mistralCloudApi": {
          "id": "ShC6KsdEF0nZwKqW",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json[\"title\"] }} - {{ $json[\"description\"] }}",
        "options": {
          "categories": "Positive, Neutral, Negative",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.",
          "includeDetailedResults": true,
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1,
      "position": [
        1000,
        740
      ],
      "id": "2476d2d3-fc1e-4f9d-8f25-f1f813632bc8",
      "name": "Sentiment Analysis"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=here is combined market data for {{ $('Code').first().json.tradingPair }} you to reference:\n\nTechnical Data:\n{{ JSON.stringify($json[\"allCandles\"]) }}\n\nSentiment Analysis:\n{{ JSON.stringify($json[\"content\"]) }}\n\nThis is a JSON array where each element is a candlestick data object for a crypto asset. Each object has the following structure:\n - timeframe: either \"15m\", \"1h\", or \"1d\"\n - candles: an array of values in the following order:\n\n    [openTime, open, high, low, close, volume,\n    closeTime, quoteVolume, trades,\n    takerBuyBaseVolume, takerBuyQuoteVolume, ignore]\n\nSentiment Data: At the end of the JSON array there is also a long term and short term sentiment analysis based on crypto news headlines for the past 7 days.\n\n\n\n {{ $('Code').first().json.tradingPair }} - 1d Market Summary\n\nMarket Price:\n{{ $json[\"price\"] }}\n\n24h Change:\n{{ $json[\"priceChangePercent\"] }}%\n\n24h High / Low:\n{{ $json[\"highPrice\"] }} / {{ $json[\"lowPrice\"] }}\n\nVolume (24h):\n{{ $json[\"volume\"] }}\n\nAI Sentiment Summary for {{ $('Code').first().json.tradingPair }}\n\nLong-term Sentiment: {{ $json[\"longTermSentiment\"] }}\nShort-term Sentiment: {{ $json[\"shortTermSentiment\"] }}\n\nSummary:\n{{ $json[\"sentimentSummary\"] }}\n\nTop Relevant News:\n{{ JSON.stringify($json[\"relevantNews\"]) }}\n AI Sentiment Summary for {{ $('Code').first().json.tradingPair }}\n\nLong-term Sentiment: {{ $json[\"longTermSentiment\"] }}\nShort-term Sentiment: {{ $json[\"shortTermSentiment\"] }}\n\nSummary:\n{{ $json[\"sentimentSummary\"] }}\n\nTop Relevant News:\n{{ JSON.stringify($json[\"relevantNews\"]) }}\n\n\nTechnical Summary for {{ $('Code').first().json.tradingPair }}\n\nTimeframes Analyzed: 15m, 1h, 1d\n Indicators:\n - RSI: {{ $json[\"rsi\"] }}\n - MACD: {{ $json[\"macd\"] }}\n - Bollinger Bands: {{ JSON.stringify($json[\"bollingerBands\"]) }}\n Trend Summary: \n{{ $json[\"trendSummary\"] }}\n\n Momentum Summary for {{ $('Code').first().json.tradingPair }}\n\nMomentum Score: {{ $json[\"momentumScore\"] }}\nMomentum Direction: {{ $json[\"momentumDirection\"] }}\n\nStochastic RSI: {{ $json[\"stochasticRsi\"] }}\nVolume Trend: {{ $json[\"volumeTrend\"] }}\n\n\n Volatility Snapshot for {{ $('Code').first().json.tradingPair}}\n\nATR (Average True Range): {{ $json[\"atr\"] }}\nHistorical Volatility (7d): {{ $json[\"volatility7d\"] }}\n\n\n📈 Charting Setup for {{ $('Code').first().json.tradingPair }}\n\n\nKey Support Levels: {{ JSON.stringify($json[\"supportLevels\"]) }}\nKey Resistance Levels: {{ JSON.stringify($json[\"resistanceLevels\"]) }}\n\nPrice Action Insight:\n{{ $json[\"priceActionInsight\"] }}\n\nhere is combined market data for {{ $('Code').first().json.tradingPair }} you to reference:\n\nTechnical Data:\n{{ JSON.stringify($json[\"allCandles\"]) }}\n\nSentiment Analysis:\n{{ JSON.stringify($json[\"content\"]) }}\n Multi-Timeframe Analysis Summary for {{ $('Code').first().json.tradingPair }}\n\n• Short-term (15m): Use for scalping, identify quick reversals.\n• Medium-term (1h): Use for intraday bias validation.\n• Long-term (1d): Use for trend alignment and macro confirmation.\n\nKey Alignment:\n- RSI confirms {{ rsi < 30 ? 'oversold' : rsi > 70 ? 'overbought' : 'neutral' }} conditions on 1d timeframe.\n\n- Stochastic RSI suggests momentum is {{ $json[\"stochasticRsi\"] > 80 ? 'overheated' : $json[\"stochasticRsi\"] < 20 ? 'cooling down' : 'stable' }}.\n\n⚔️ Trade Bias:\n{{ $json[\"rsi\"] < 30 ? \"Potential Buy Zone: Oversold condition on RSI\" : $json[\"rsi\"] > 70 ? \"Caution: RSI Overbought – expect pullback\" : \"Neutral RSI – wait for MACD crossover or price action confirmation\" }}\n\n📉 Risk/Reward Map:\n- Stop-loss recommendation: ~{{ (parseFloat($json[\"price\"]) - parseFloat($json[\"atr\"]) * 2).toFixed(2) }}\n- Take-Profit tiers:\n  1. TP1 = {{ (parseFloat($json[\"price\"]) + parseFloat($json[\"atr\"]) * 1.5).toFixed(2) }}\n  2. TP2 = {{ (parseFloat($json[\"price\"]) + parseFloat($json[\"atr\"]) * 2.5).toFixed(2) }}\n  3. TP3 = {{ (parseFloat($json[\"price\"]) + parseFloat($json[\"atr\"]) * 3.5).toFixed(2) }}\n\n\nYou are a professional AI assistant specializing in financial analytics. Format a high-quality Telegram message using the given JSON output. Use only HTML formatting (no Markdown). Be clear, concise, and well-organized.\n\n---\n\n<b>{{ $('Code').first().json.tradingPair }} - 1D Market Summary</b>\n\n<b>Price:</b> {{ $json[\"price\"] }}  \n<b>24h Change:</b> {{ $json[\"priceChangePercent\"] }}%  \n<b>High / Low:</b> {{ $json[\"highPrice\"] }} / {{ $json[\"lowPrice\"] }}  \n<b>Volume:</b> {{ $json[\"volume\"] }}\n\n<b>Sentiment Analysis</b>\n• <b>Long-term:</b> {{ $json[\"longTermSentiment\"] }}  \n• <b>Short-term:</b> {{ $json[\"shortTermSentiment\"] }}  \n• <b>Summary:</b> {{ $json[\"sentimentSummary\"] }}\n\n<b> Technical Indicators</b>\n• <b>RSI:</b> {{ $json[\"rsi\"] }}  \n• <b>MACD:</b> Histogram {{ $json[\"macd\"].histogram }} ({{ $json[\"macd\"].state }})  \n• <b>Bollinger Bands:</b> Upper {{ $json[\"bollingerBands\"].upper }}, Lower {{ $json[\"bollingerBands\"].lower }}\n\n<b> Trend Summary:</b> {{ $json[\"trendSummary\"] }}\n\n<b> Momentum</b>\n• <b>Score:</b> {{ $json[\"momentumScore\"] }}  \n• <b>Direction:</b> {{ $json[\"momentumDirection\"] }}  \n• <b>Stoch RSI:</b> {{ $json[\"stochasticRsi\"] }}  \n• <b>Volume Trend:</b> {{ $json[\"volumeTrend\"] }}\n\n<b> Volatility</b>\n• <b>ATR:</b> {{ $json[\"atr\"] }}  \n• <b>7-Day Volatility:</b> {{ $json[\"volatility7d\"] }}\n\n<b> Chart Setup</b>\n• <b>Support:</b> {{ $json[\"supportLevels\"][0] }}, {{ $json[\"supportLevels\"][1] }}  \n• <b>Resistance:</b> {{ $json[\"resistanceLevels\"][0] }}, {{ $json[\"resistanceLevels\"][1] }}  \n• <b>Insight:</b> {{ $json[\"priceActionInsight\"] }}\n\n<b> Trade Bias</b>\n{{ $json[\"rsi\"] < 30 ? \"RSI Oversold — Potential Buy Zone\" : $json[\"rsi\"] > 70 ? \"RSI Overbought — Expect Pullback\" : \"RSI Neutral — Wait for confirmation\" }}\n\n<b> Risk/Reward</b>\n• <b>Stop-loss:</b> {{ $json[\"stopLoss\"] }}  \n• <b>Take Profits:</b> {{ $json[\"takeProfits\"][0] }}, {{ $json[\"takeProfits\"][1] }}, {{ $json[\"takeProfits\"][2] }}\n\n<b> Top News (Past 3 Days)</b>\n<pre>{{ JSON.stringify($json[\"relevantNews\"].slice(0, 3), null, 2) }}</pre>\n\n<i>Generated by your AI-powered n8n crypto intelligence bot</i>\n\n\n\n\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2160,
        540
      ],
      "id": "0d346ba6-99d4-43bf-850b-e8f7ed63b623",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2180,
        760
      ],
      "id": "c9562da4-7345-477d-a8f5-f235e9931568",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "Wqlw8ooni3xblEYm",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputText = $json[\"output\"] || \"\";\nif (typeof inputText !== \"string\") {\n  throw new Error(\"AI output must be a string.\");\n}\n\n// Clean up triple backticks and trim\nconst cleaned = inputText.replace(/```(?:html|text)?/gi, '').replace(/```/g, '').trim();\n\n// Desired max length for each message (Telegram limit is 4096)\nconst MAX_LENGTH = 4000;\n\n// If short enough, return as one message\nif (cleaned.length <= MAX_LENGTH) {\n  return [{ json: { blockNumber: 1, content: cleaned } }];\n}\n\n// Smart split: look for closest sentence boundary near middle\nconst mid = Math.floor(cleaned.length / 2);\nconst splitAt = cleaned.lastIndexOf(\".\", mid) !== -1\n  ? cleaned.lastIndexOf(\".\", mid) + 1\n  : cleaned.lastIndexOf(\"\\n\", mid) !== -1\n    ? cleaned.lastIndexOf(\"\\n\", mid) + 1\n    : mid; // fallback: hard split\n\nconst firstHalf = cleaned.substring(0, splitAt).trim();\nconst secondHalf = cleaned.substring(splitAt).trim();\n\nreturn [\n  { json: { blockNumber: 1, content: firstHalf } },\n  { json: { blockNumber: 2, content: secondHalf } }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2520,
        540
      ],
      "id": "b924cc8c-8ecf-494d-9780-f5c79f89539d",
      "name": "Code3"
    },
    {
      "parameters": {
        "chatId": "={{ $('Request').first().json.message.chat.id }}",
        "text": "={{ $json.content }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2740,
        540
      ],
      "id": "cb56405d-28d3-4d8f-bacb-2ded6efe0a70",
      "name": "Telegram",
      "webhookId": "eaeae83f-8d2c-43dd-a5e1-1fb9c4c4262e",
      "credentials": {
        "telegramApi": {
          "id": "xzQ3XLqfI6hwWnfZ",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "neural_schema 1",
            "type": "main",
            "index": 0
          },
          {
            "node": "neural_schema 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "neural_schema 3",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "neural_schema 3": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "neural_schema 2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "neural_schema 1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Sentiment Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Sentiment Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Sentiment Analysis": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "75efc875-5f6a-4b1f-9c31-cbaa91ef8110",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e820bff538866aa96c3e3dd9242659d3b71714678418d4dddb944bcd10c2aea3"
  },
  "id": "xToWwPcCglDMkjDC",
  "tags": []
}
